State machine description:

States:
1. Idle
2. Waiting for Discovery
3. Parachute Commands

Events:
1. Connection success
2. Discovery of autopilot system
3. Timeout waiting for autopilot system
4. Parachute command received

Transitions:
1. Idle -> Waiting for Discovery: Connection success event
2. Waiting for Discovery -> Parachute Commands: Discovery of autopilot system event
3. Waiting for Discovery -> Idle: Timeout waiting for autopilot system event
4. Parachute Commands -> Parachute Commands: Parachute command received event

C code:

```c
#define PARACHUTE_DISABLE 0
#define PARACHUTE_ENABLE 1
#define PARACHUTE_RELEASE 2

typedef enum {
    STATE_IDLE,
    STATE_WAITING_FOR_DISCOVERY,
    STATE_PARACHUTE_COMMANDS
} state_t;

typedef enum {
    EVENT_CONNECTION_SUCCESS,
    EVENT_AUTPILOT_DISCOVERY,
    EVENT_TIMEOUT,
    EVENT_PARACHUTE_COMMAND
} event_t;

state_t current_state = STATE_IDLE;
uint8_t our_sysid = 1;

static void process_command_long(const mavlink_message_t& message, uint8_t our_sysid)
{
    // Code for processing the command_long message
}

int main(int argc, char* argv[])
{
    // Code for validating command line arguments

    Mavsdk mavsdk;

    // Set initial configuration
    mavsdk.set_configuration(Mavsdk::Configuration{our_sysid, MAV_COMP_ID_PARACHUTE, false});

    // Add connection
    const ConnectionResult connection_result = mavsdk.add_any_connection(connection_url);

    if (connection_result != ConnectionResult::Success) {
        // Code for connection failure handling
    }

    // Subscribe to new system event
    mavsdk.subscribe_on_new_system([&mavsdk]() {
        auto system = mavsdk.systems().back();

        if (system->has_autopilot()) {
            // Code for autopilot system discovery
        }
    });

    // Wait for autopilot discovery or timeout
    if (fut.wait_for(std::chrono::seconds(3)) == std::future_status::timeout) {
        // Code for timeout handling
    }

    // Get discovered system
    auto system = fut.get();

    // Update system ID if required
    if (system->get_system_id() != our_sysid) {
        our_sysid = system->get_system_id();
        mavsdk.set_configuration(Mavsdk::Configuration{our_sysid, MAV_COMP_ID_PARACHUTE, false});
    }

    // Instantiate plugins
    auto mavlink_passthrough = MavlinkPassthrough{system};

    mavlink_passthrough.subscribe_message_async(
        MAVLINK_MSG_ID_COMMAND_LONG, [&our_sysid](const mavlink_message_t& message) {
            process_command_long(message, our_sysid);
        });

    // Wait for parachute commands
    while (true) {
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }

    return 0;
}
```