State Machine Description:

States:
1. Idle: The initial state of the system before any systems are discovered.
2. Discovered: The autopilot system is discovered and ready to be used.
3. ConfirmTermination: The user is prompted to confirm if they want to terminate the flight.
4. Terminating: The termination command is being sent to the autopilot system.

Events:
1. SystemDiscovered: Triggered when a new system is discovered.
2. TerminateConfirmation: Triggered when the user confirms the termination.
3. TerminateCommand: Triggered when the termination command is sent.

Transitions:
1. Idle -> Discovered: SystemDiscovered event occurs.
2. Discovered -> ConfirmTermination: TerminateConfirmation event occurs.
3. ConfirmTermination -> Terminating: TerminateCommand event occurs.
4. ConfirmTermination -> Discovered: SystemDiscovered event occurs before TerminateCommand event.
5. Terminating -> Discovered: SystemDiscovered event occurs.

C Code:

#include <mavsdk/mavsdk.h>
#include <mavsdk/plugins/action/action.h>
#include <chrono>
#include <cstdint>
#include <iostream>
#include <future>
#include <memory>
#include <thread>

using namespace mavsdk;

// Define states
enum class State {
    Idle,
    Discovered,
    ConfirmTermination,
    Terminating
};

// Define events
enum class Event {
    SystemDiscovered,
    TerminateConfirmation,
    TerminateCommand
};

// State transition function
State transition(State current_state, Event event) {
    switch (current_state) {
        case State::Idle:
            if (event == Event::SystemDiscovered) {
                return State::Discovered;
            }
            break;
        case State::Discovered:
            if (event == Event::TerminateConfirmation) {
                return State::ConfirmTermination;
            }
            break;
        case State::ConfirmTermination:
            if (event == Event::TerminateCommand) {
                return State::Terminating;
            }
            if (event == Event::SystemDiscovered) {
                return State::Discovered;
            }
            break;
        case State::Terminating:
            if (event == Event::SystemDiscovered) {
                return State::Discovered;
            }
            break;
    }
    return current_state;
}

static void usage(const std::string& bin_name)
{
    std::cerr << "Usage : " << bin_name << " <connection_url>\n"
              << "Connection URL format should be :\n"
              << " For TCP : tcp://[server_host][:server_port]\n"
              << " For UDP : udp://[bind_host][:bind_port]\n"
              << " For Serial : serial:///path/to/serial/dev[:baudrate]\n"
              << "For example, to connect to the simulator use URL: udp://:14540\n";
}

int main(int argc, char* argv[])
{
    if (argc != 2) {
        usage(argv[0]);
        return 1;
    }

    const std::string connection_url = argv[1];

    Mavsdk mavsdk;

    std::cout << "Waiting to discover system...\n";

    State state = State::Idle;
    
    auto prom = std::promise<std::shared_ptr<System>>{};
    auto fut = prom.get_future();

    // We wait for new systems to be discovered, once we find one that has an
    // autopilot, we decide to use it.
    mavsdk.subscribe_on_new_system([&mavsdk, &prom, &state]() {
        auto system = mavsdk.systems().back();

        std::cout << "Found " << mavsdk.systems().size() << " systems\n";

        if (system->has_autopilot()) {
            std::cout << "Discovered autopilot\n";

            // Unsubscribe again as we only want to find one system.
            mavsdk.subscribe_on_new_system(nullptr);
            prom.set_value(system);

            state = transition(state, Event::SystemDiscovered);
        }
    });

    const ConnectionResult connection_result = mavsdk.add_any_connection(connection_url);

    if (connection_result != ConnectionResult::Success) {
        std::cerr << "Connection failed: " << connection_result << '\n';
        return 1;
    }

    // We usually receive heartbeats at 1Hz, therefore we should find a
    // system after around 3 seconds max, surely.
    while (state != State::Discovered) {
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
        if (fut.wait_for(std::chrono::seconds(3)) == std::future_status::timeout) {
            std::cerr << "No autopilot found, exiting.\n";
            return 1;
        }
    }

    // Get discovered system now.
    auto system = fut.get();

    // Instantiate plugins.
    auto action = Action{system};

    std::this_thread::sleep_for(std::chrono::seconds(1));

    std::cout << "WARNING: termination will:\n"
                 "- stop all motors in air, \n"
                 "- set servos to failsafe position,\n"
                 "- and deploy the parachute if available\n"
                 "\n";

    std::cout << "Are you sure to terminate? [y/N]\n";
    char type;
    std::cin >> type;

    if (type != 'y' && type != 'Y') {
        std::cout << "Not terminating, exiting.\n";
        return 0;
    }

    state = transition(state, Event::TerminateConfirmation);

    if (state == State::Terminating) {
        // Sending terminate command.
        std::cout << "Sending termination\n";
        action.terminate();
    }

    return 0;
}