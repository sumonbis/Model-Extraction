State Machine Description:
- States:
  1. Idle: The initial state where the program is waiting for user input.
  2. SystemDiscovery: The state where the program is discovering systems with an autopilot.
  3. CalibrationAccelerometer: The state where the program is calibrating the accelerometer.
  4. CalibrationGyro: The state where the program is calibrating the gyro.
  5. CalibrationMagnetometer: The state where the program is calibrating the magnetometer.
  6. CalibrationComplete: The final state where all calibrations are completed.

- Events:
  1. Start: The event to start the calibration process.
  2. SystemDiscovered: The event triggered when a system with an autopilot is discovered.
  3. CalibrationComplete: The event triggered when a calibration is completed.

- Transitions:
  1. Idle -> SystemDiscovery (Start)
  2. SystemDiscovery -> CalibrationAccelerometer (SystemDiscovered)
  3. CalibrationAccelerometer -> CalibrationGyro (CalibrationComplete)
  4. CalibrationGyro -> CalibrationMagnetometer (CalibrationComplete)
  5. CalibrationMagnetometer -> CalibrationComplete (CalibrationComplete)

C Code:
```cpp
#include <mavsdk/mavsdk.h>
#include <mavsdk/plugins/calibration/calibration.h>
#include <future>
#include <iostream>

using namespace mavsdk;
using std::chrono::seconds;

enum class State {
    Idle,
    SystemDiscovery,
    CalibrationAccelerometer,
    CalibrationGyro,
    CalibrationMagnetometer,
    CalibrationComplete
};

enum class Event {
    Start,
    SystemDiscovered,
    CalibrationComplete
};

static std::function<void(Calibration::Result, Calibration::ProgressData)>
create_calibration_callback(std::promise<void>&);

static void calibrate_accelerometer(Calibration&, std::promise<void>&);
static void calibrate_gyro(Calibration&, std::promise<void>&);
static void calibrate_magnetometer(Calibration&, std::promise<void>&);

void usage(const std::string& bin_name)
{
    std::cerr << "Usage : " << bin_name << " <connection_url>\n"
              << "Connection URL format should be :\n"
              << " For TCP : tcp://[server_host][:server_port]\n"
              << " For UDP : udp://[bind_host][:bind_port]\n"
              << " For Serial : serial:///path/to/serial/dev[:baudrate]\n"
              << "For example, to connect to the simulator use URL: udp://:14540\n";
}

std::shared_ptr<System> get_system(Mavsdk& mavsdk)
{
    std::cout << "Waiting to discover system...\n";
    auto prom = std::promise<std::shared_ptr<System>>{};
    auto fut = prom.get_future();

    State state = State::SystemDiscovery;

    // State machine loop
    while (state != State::CalibrationComplete) {
        switch (state) {
            case State::SystemDiscovery:
                mavsdk.subscribe_on_new_system([&mavsdk, &prom, &state]() {
                    auto system = mavsdk.systems().back();

                    if (system->has_autopilot()) {
                        std::cout << "Discovered autopilot\n";

                        // Unsubscribe again as we only want to find one system.
                        mavsdk.subscribe_on_new_system(nullptr);
                        prom.set_value(system);
                        state = State::CalibrationAccelerometer;
                    }
                });

                // We usually receive heartbeats at 1Hz, therefore we should find a
                // system after around 3 seconds max, surely.
                if (fut.wait_for(seconds(3)) == std::future_status::timeout) {
                    std::cerr << "No autopilot found.\n";
                    return {};
                }
                break;
            case State::CalibrationAccelerometer:
                calibrate_accelerometer(calibration, calibration_promise);
                state = State::CalibrationGyro;
                break;
            case State::CalibrationGyro:
                calibrate_gyro(calibration, calibration_promise);
                state = State::CalibrationMagnetometer;
                break;
            case State::CalibrationMagnetometer:
                calibrate_magnetometer(calibration, calibration_promise);
                state = State::CalibrationComplete;
                break;
        }
    }

    // Get discovered system now.
    return fut.get();
}

int main(int argc, char** argv)
{
    if (argc != 2) {
        usage(argv[0]);
        return 1;
    }

    Mavsdk mavsdk;
    ConnectionResult connection_result = mavsdk.add_any_connection(argv[1]);

    if (connection_result != ConnectionResult::Success) {
        std::cerr << "Connection failed: " << connection_result << '\n';
        return 1;
    }

    auto system = get_system(mavsdk);
    if (!system) {
        return 1;
    }

    // Instantiate plugin.
    auto calibration = Calibration(system);

    // Run calibrations
    calibrate_accelerometer(calibration);
    calibrate_gyro(calibration);
    calibrate_magnetometer(calibration);

    return 0;
}

void calibrate_accelerometer(Calibration& calibration, std::promise<void>& calibration_promise)
{
    std::cout << "Calibrating accelerometer...\n";

    std::promise<void> calibration_promise;
    auto calibration_future = calibration_promise.get_future();

    calibration.calibrate_accelerometer_async(create_calibration_callback(calibration_promise));

    calibration_future.wait();
}

std::function<void(Calibration::Result, Calibration::ProgressData)>
create_calibration_callback(std::promise<void>& calibration_promise)
{
    return [&calibration_promise](
               const Calibration::Result result, const Calibration::ProgressData progress_data) {
        switch (result) {
            case Calibration::Result::Success:
                std::cout << "--- Calibration succeeded!\n";
                calibration_promise.set_value();
                break;
            case Calibration::Result::Next:
                if (progress_data.has_progress) {
                    std::cout << "    Progress: " << progress_data.progress << '\n';
                }
                if (progress_data.has_status_text) {
                    std::cout << "    Instruction: " << progress_data.status_text << '\n';
                }
                break;
            default:
                std::cout << "--- Calibration failed with message: " << result << '\n';
                calibration_promise.set_value();
                break;
        }
    };
}

void calibrate_gyro(Calibration& calibration, std::promise<void>& calibration_promise)
{
    std::cout << "Calibrating gyro...\n";

    std::promise<void> calibration_promise;
    auto calibration_future = calibration_promise.get_future();

    calibration.calibrate_gyro_async(create_calibration_callback(calibration_promise));

    calibration_future.wait();
}

void calibrate_magnetometer(Calibration& calibration, std::promise<void>& calibration_promise)
{
    std::cout << "Calibrating magnetometer...\n";
    
    std::promise<void> calibration_promise;
    auto calibration_future = calibration_promise.get_future();

    calibration.calibrate_magnetometer_async(create_calibration_callback(calibration_promise));

    calibration_future.wait();
}
```