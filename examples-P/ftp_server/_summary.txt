State Machine Description:

The state machine for the given source code can be described as follows:

States:
1. Initialization: The program initializes the Mavsdk library and sets up the UDP connection to the remote address.
2. FTP Server Setup: Once the connection is established, the FTP server is set up with the provided root directory.
3. Running: The FTP server is now running and waiting for incoming requests.

Events:
- Starting the program.
- Successful UDP connection setup.
- FTP server setup complete.

Transitions:
1. Initialization -> FTP Server Setup:
   - Event: Successful UDP connection setup.
   - Action: Set up the FTP server with the provided root directory.

2. FTP Server Setup -> Running:
   - Event: FTP server setup complete.
   - Action: Start running the FTP server.

3. Running:
   - No events or actions needed as the program stays in this state indefinitely.

C Code:

```cpp
#include <mavsdk/mavsdk.h>
#include <mavsdk/plugins/ftp/ftp.h>

#include <chrono>
#include <iostream>
#include <iomanip>
#include <string>
#include <thread>

using namespace mavsdk;

// Define the states
enum class State {
    Initialization,
    FTPServerSetup,
    Running
};

// Define the events
enum class Event {
    Start,
    ConnectionSetupSuccess,
    FTPServerSetupComplete
};

int main(int argc, char** argv)
{
    if (argc != 4) {
        usage(argv[0]);
        return 1;
    }

    State current_state = State::Initialization;

    Mavsdk mavsdk;
    Mavsdk::Configuration configuration(Mavsdk::Configuration::UsageType::CompanionComputer);
    mavsdk.set_configuration(configuration);

    ConnectionResult connection_result = mavsdk.setup_udp_remote(argv[1], std::stoi(argv[2]));
    if (connection_result != ConnectionResult::Success) {
        std::cerr << "Error setting up Mavlink FTP server.\n";
        return 1;
    }

    auto system_cc = mavsdk.systems().at(0);

    auto ftp_server = Ftp{system_cc};
    ftp_server.set_root_directory(argv[3]);

    std::cout << "Mavlink FTP server running.\n"
              << '\n'
              << "Remote:       " << argv[1] << ":" << argv[2] << '\n'
              << "Component ID: " << static_cast<int>(ftp_server.get_our_compid()) << '\n';

    while (true) {
        switch (current_state) {
            case State::Initialization:
                // Event: Start
                // Action: None
                current_state = State::FTPServerSetup;
                break;
            case State::FTPServerSetup:
                // Event: ConnectionSetupSuccess
                // Action: Set up FTP server
                ftp_server.set_root_directory(argv[3]);

                // Event: FTPServerSetupComplete
                // Action: None
                current_state = State::Running;
                break;
            case State::Running:
                // No events or actions required
                break;
        }

        std::this_thread::sleep_for(std::chrono::seconds(1));
    }

    return 0;
}
```

Note: The `usage` function is missing from the provided source code, so it needs to be defined separately before the `main` function.