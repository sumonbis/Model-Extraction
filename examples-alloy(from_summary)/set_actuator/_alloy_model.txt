Here is the Alloy model for the given drone application source code:

```alloy
open util/integer

abstract sig Component {}

sig Mavsdk extends Component {
    add_any_connection: String -> univ,
    subscribe_on_new_system: univ -> univ
}

sig Action extends Component {
    set_actuator: Component -> univ
}

sig System extends Component {
    has_autopilot: univ -> univ
}

abstract sig Connection {}

sig ConnectionURL extends Connection {}

sig std_promise extends Component {}

sig std_shared_ptr extends Component {}

sig Main extends Component {
    main: univ -> univ,
    usage: String -> univ
}

sig std_string {}

sig std_cerr {}

sig std_stod {}

sig std_stof {}

abstract sig std_chrono {}

sig std_future extends Component {}

sig std_cout {}

abstract sig AutoGeneratedType {}

one sig Default extends AutoGeneratedType {}

abstract sig Result {}

one sig Success extends Result {}

sig Variable {
    value: AutoGeneratedType
}

sig Function {
    ref: univ -> Component
}

sig Callback extends Function {}

fun bind[s, t: AutoGeneratedType](s: s, f: s -> t): Variable {
    Variable[f[s]]
}

fact {
    Function.ref in Mavsdk.add_any_connection
    Function.ref in Mavsdk.subscribe_on_new_system
    Function.ref in Action.set_actuator
    Function.ref in Main.main
    Function.ref in Main.usage
    Action.set_actuator.ref in System.has_autopilot
}

pred show() {
    #Component = 6
    #Callback = 1
    #Connection = 1
    #Variable = 1
    #std_string = 1
    #std_cerr = 1
    #std_stod = 1
    #std_stof = 1
    #std_future = 1
    #std_cout = 1
    #std_chrono = 0
    #std_promise = 1
    #std_shared_ptr = 1
    #Result = 2
    #AutoGeneratedType = 2
    #ConnectionURL = 1
}
```

Note: This Alloy model captures the structure and relationships between the different components in the drone application source code. However, it does not capture the behavior of the components or any functional requirements of the application. It solely focuses on the static architecture.